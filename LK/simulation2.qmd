# First script for Simulation Study 2

```{r}
set.seed(1)
```



# Packages

Copied and pasted from original paper.

```{r}
# Specify the libraries to load
libraries <- c("GPArotation", "CDM", "miceadds", "TAM", "sirt", "lavaan", "dplyr", "tidyr", "purrr", "tidyverse", "furrr")
# Set the R mirror to the cloud mirror of RStudio
options(repos = "https://cloud.r-project.org/")

# Load the libraries
for (library_name in libraries) {
  if (!require(library_name, character.only = TRUE)) {
    install.packages(library_name)
    library(library_name, character.only = TRUE)
  }
}
```

# Specify 2-factor-Model

```{r}
model <- "

#Structural part
    FX =~ l1*X1 + l2*X2 + l3*X3
    FY =~ l4*Y1 + l5*Y2 + l6*Y3
    FX ~~ 1*FX    #Fixed latent variance
    FY ~~ 1*FY    #Fixed latent variance
    FX ~~ phi*FY
    phi < 0.99    #Phi between -1 and 1
    phi > -0.99

#Measurement part    
    X1 ~~ vX1*X1
    X2 ~~ vX2*X2    
    X3 ~~ vX3*X3
    Y1 ~~ vY1*Y1
    Y2 ~~ vY2*Y2    
    Y3 ~~ vY3*Y3
    l1 > 0.01     #only positive loadings
    l2 > 0.01    
    l3 > 0.01
    l4 > 0.01
    l5 > 0.01
    l6 > 0.01       
    vX1 > 0.01    #only positive variances
    vX2 > 0.01    
    vX3 > 0.01
    vY1 > 0.01
    vY2 > 0.01    
    vY3 > 0.01   
    "
```

# Setup and Design

```{r}
setup_design <- function() {
  
  # Sample sizes
  N_sizes <- c(50, 100, 250, 500, 1000, 2500, 10^5)
  
  # Cross-loading conditions
  cl_conditions <- c(1, 2)
  
  # Delta values for cross-loadings, if present, take values of either 0.3 or -0.3
  delta_values <- c(0.3, -0.3)
  
  design <- expand.grid(N = N_sizes, cl = cl_conditions, delta_value = delta_values)


  return(design)
}


```

# Data generating Mechanism

## Fixed values
```{r}
lam1 <- 0.55
lam2 <- 0.45
phi <- 0.60

LAM <- matrix(0, nrow=6, ncol=2)
LAM[1:3, 1] <- lam1
LAM[4:6, 2] <- lam2

PHI <- matrix(0, nrow=2, ncol=2)
diag(PHI) <- 1
PHI[1, 2] <- PHI[2, 1] <- phi

THETA <- diag(c(rep(1-lam1^2, 3), rep(1-lam2^2, 3)))

#Don't need Beta in this study
```

## Varying values
```{r}
get_dgm <- function(cl, delta_value) {
  
  # Apply cross-loadings based on the condition
  if (cl >= 1) {
    LAM[1, 2] <- delta_value
  } 
  if (cl == 2) {
    LAM[4, 1] <- delta_value
  }
  
  MLIST <-list(LAM = LAM, PHI = PHI, THETA = THETA)
  return(MLIST)
}


```

# Apply Syntax
```{r}
apply_syntax <- function(model, MLIST) {
  
  LAM <- MLIST$LAM
  
  pop.model <- paste(
"#Structural part",
    paste("FX =~", LAM[1,1], "*X1 +", LAM[2,1], "*X2 +", LAM[3,1], "*X3"),
    paste("FY =~", LAM[4,2], "*Y1 +", LAM[5,2], "*Y2 +", LAM[6,2], "*Y3"),
    "FX ~~ 1*FX",    
    "FY ~~ 1*FY",    
    paste("FX ~~", PHI[1,2], "*FY"),
"#Measurement part",    
    paste("X1 ~~", THETA[1,1], "*X1"),
    paste("X2 ~~", THETA[2,2], "*X2"),
    paste("X3 ~~", THETA[3,3], "*X3"),
    paste("Y1 ~~", THETA[4,4], "*Y1"),
    paste("Y2 ~~", THETA[5,5], "*Y2"),
    paste("Y3 ~~", THETA[6,6], "*Y3"),
    sep = "\n"
  ) 

  # Conditionally add cross-loadings if rc > 0
  if (LAM[1, 2] != 0) {
        pop.model <- paste(
                            "#Structural part",
                                paste("FX =~", LAM[1,1], "*X1 +", LAM[2,1], "*X2 +", LAM[3,1], "*X3"),
                                paste("FY =~", LAM[4,2], "*Y1 +", LAM[5,2], "*Y2 +", LAM[6,2], "*Y3 +", LAM[1, 2], "*X1"),
                                "FX ~~ 1*FX",    
                                "FY ~~ 1*FY",    
                                paste("FX ~~", PHI[1,2], "*FY"),
                            "#Measurement part",    
                                paste("X1 ~~", THETA[1,1], "*X1"),
                                paste("X2 ~~", THETA[2,2], "*X2"),
                                paste("X3 ~~", THETA[3,3], "*X3"),
                                paste("Y1 ~~", THETA[4,4], "*Y1"),
                                paste("Y2 ~~", THETA[5,5], "*Y2"),
                                paste("Y3 ~~", THETA[6,6], "*Y3"),
                                sep = "\n"
                              )
    }
    if (LAM[4, 1] != 0) {
        pop.model <- paste(
                            "#Structural part",
                                paste("FX =~", LAM[1,1], "*X1 +", LAM[2,1], "*X2 +", LAM[3,1], "*X3 +", LAM[4, 1], "*Y1"),
                                paste("FY =~", LAM[4,2], "*Y1 +", LAM[5,2], "*Y2 +", LAM[6,2], "*Y3 +", LAM[1, 2], "*X1"),
                                "FX ~~ 1*FX",    
                                "FY ~~ 1*FY",    
                                paste("FX ~~", PHI[1,2], "*FY"),
                            "#Measurement part",    
                                paste("X1 ~~", THETA[1,1], "*X1"),
                                paste("X2 ~~", THETA[2,2], "*X2"),
                                paste("X3 ~~", THETA[3,3], "*X3"),
                                paste("Y1 ~~", THETA[4,4], "*Y1"),
                                paste("Y2 ~~", THETA[5,5], "*Y2"),
                                paste("Y3 ~~", THETA[6,6], "*Y3"),
                                sep = "\n"
                              )
    }
  
  return(pop.model)
}

model_syntax <-apply_syntax(model,get_dgm(1,-0.3))
cat(model_syntax)

```

# Simulate data
```{r}
simulate_data <- function(N, cl, delta_value, model) {
  # Get DGM parameters
  dgm_params <- get_dgm(cl, delta_value)

  pop.model <- apply_syntax(model, dgm_params)
  
  df_dat <- simulateData(pop.model, sample.nobs = N)
  
  return(df_dat)
}

```

# Planned Analysis
```{r}
#Specify estimation methods of interest

models <- list(
  SEM_ML = \(d) lavaan::sem(model, data=d, estimator="ML", std.lv= TRUE),
  SEM_ULS = \(d) lavaan::sem(model, data=d, estimator="ULS", std.lv= TRUE),
  LSAM_ML = \(d)
  lavaan::sam(model, data=d, sam.method="local", estimator = "ML", std.lv= TRUE),
  LSAM_ULS = \(d)lavaan::sam(model, data=d, sam.method="local", estimator = "ULS", std.lv= TRUE),
  GSAM_ML = \(d) lavaan::sam(model, data=d, sam.method = "global", estimator = "ML", std.lv= TRUE),
  GSAM_ULS = \(d) lavaan::sam(model, data=d, sam.method = "global", estimator = "ULS", std.lv= TRUE)
)
# postprocess each model output
models <- modify(models, ~compose(\(e)filter(e, label == "phi")$est, parameterEstimates, .))
# apply all estimators to the same dataset
apply_models <- \(d) map(models, exec, d)

planned_analysis <- compose(apply_models, simulate_data)

#The arguments to planned_analysis() are always equivalent to the ones from simulate_data(), within one simulation
planned_analysis(100, 0, 0.3, model)

```
# Extract results

```{r}

extract_results <- function(results_df){
#Compute performance measures
results_metrics <- results_df %>%
  group_by(N, cl, delta_value) %>%
  summarize(across(everything(),
                   list(
                     bias = ~mean(abs(.x - phi)),          # Average absolute bias
                     sd = ~sd(.x),                          # SD
                     rmse = ~sqrt(mean((.x - phi) ^ 2))  # Root mean square error
                   )), .groups = 'drop')

  split_metrics <- results_metrics %>%
    group_by(cl, delta_value) %>%
    group_split() %>%
     set_names(map(., ~ paste(unique(.x$cl), unique(.x$delta_value), sep = "_")))

  # Define a function to transform each group into the desired format
  transform_group <- function(df_group) {
    df_group <- df_group %>%
                  select(-cl, -delta_value) %>%
                  pivot_longer(cols = starts_with(c("SEM_","LSAM_","GSAM_")), names_to = "method_metric", values_to = "value") 
        
        bias <- df_group %>% filter(str_detect(method_metric, "bias")) %>%
                pivot_wider(names_from = N, values_from = value)
          sd <- df_group %>% filter(str_detect(method_metric, "sd")) %>%
              pivot_wider(names_from = N, values_from = value)
        rmse <- df_group %>% filter(str_detect(method_metric, "rmse")) %>%
            pivot_wider(names_from = N, values_from = value)
      
        return(list(bias = bias, sd = sd, rmse = rmse))  
  }

  # Apply the transformation to each group and store the results
  tables_list <- map(split_metrics, transform_group)

  return(tables_list)
}


```


#  Simulation Study
Same as Study1
```{r}
design <- setup_design()

simulation_study_ <- function(design){
  all_steps <- mutate(design, !!!future_pmap_dfr(design, planned_analysis, .options = furrr_options(seed = TRUE)))
  all_steps
}

simulation_study <- function(design, k, seed = NULL) {
  future_map_dfr(seq_len(k), ~simulation_study_(design), .options = furrr_options(seed = seed))
}

results_df <- simulation_study(design,2,1235)
results_df

tables_list <- extract_results(results_df)
```
