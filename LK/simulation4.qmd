# First script for Simulation Study 1

```{r}
set.seed(1)
```

# Packages

Copied and pasted from original paper.

```{r}
# Specify the libraries to load
libraries <- c("GPArotation", "CDM", "miceadds", "TAM", "sirt", "lavaan", "dplyr", "tidyr", "purrr", "tidyverse", "furrr")
# Set the R mirror to the cloud mirror of RStudio
options(repos = "https://cloud.r-project.org/")

# Load the libraries
for (library_name in libraries) {
  if (!require(library_name, character.only = TRUE)) {
    install.packages(library_name)
    library(library_name, character.only = TRUE)
  }
}
```

# Specify 5-factor-Model

```{r}
model <- "

#Structural part
    F1 =~ l1*Y1 + l2*Y2 + l3*Y3
    F2 =~ l4*Y4 + l5*Y5 + l6*Y6
    F3 =~ l7*Y7 + l8*Y8 + l9*Y9
    F4 =~ l10*Y10 + l11*Y11 + l12*Y12
    F5 =~ l13*Y13 + l14*Y14 + l15*Y15
    
#Fixed latent variances    
    F1 ~~ 1*F1    
    F2 ~~ 1*F2
    F3 ~~ 1*F3
    F4 ~~ 1*F4
    F5 ~~ 1*F5
    
#Covariances
    F1 ~~ phi21*F2
    F2 ~~ phi52*F5
    
#Regressions
    F3 ~ phi31*F1
    F4 ~ phi41*F1
    F5 ~ phi51*F1
    F3 ~ phi32*F2
    F4 ~ phi42*F2
    F5 ~ phi53*F3
    F3 ~ phi43*F4
    F5 ~ phi54*F4

#Measurement part    
    Y1 ~~ vY1*Y1
    Y2 ~~ vY2*Y2    
    Y3 ~~ vY3*Y3
    Y4 ~~ vY4*Y4
    Y5 ~~ vY5*Y5    
    Y6 ~~ vY6*Y6
    Y7 ~~ vY7*Y7
    Y8 ~~ vY8*Y8
    Y9 ~~ vY9*Y9
    Y10 ~~ vY10*Y10
    Y11 ~~ vY11*Y11
    Y12 ~~ vY12*Y12
    Y13 ~~ vY13*Y13
    Y14 ~~ vY14*Y14
    Y15 ~~ vY15*Y15

#only positive loadings    
    l1 > 0.01          
    l2 > 0.01    
    l3 > 0.01
    l4 > 0.01
    l5 > 0.01
    l6 > 0.01
    l7 > 0.01
    l8 > 0.01
    l9 > 0.01
    l10 > 0.01
    l11 > 0.01
    l12 > 0.01
    l13 > 0.01
    l14 > 0.01
    l15 > 0.01
    
#only positive variances    
    vY1 > 0.01    
    vY2 > 0.01    
    vY3 > 0.01
    vY4 > 0.01
    vY5 > 0.01    
    vY6 > 0.01
    vY7 > 0.01
    vY8 > 0.01
    vY9 > 0.01
    vY10 > 0.01
    vY11 > 0.01
    vY12 > 0.01
    vY13 > 0.01
    vY14 > 0.01
    vY15 > 0.01
    
    "


```

# Setup and Design

```{r}
setup_design <- function() {
  # Sample sizes
  N_sizes <- c(50, 100, 250, 500, 1000, 2500, 10^5)
  
  # DGM conditions
  DGM_types <- c(1,2,3)
  
  # Expand grid to create a data frame of all combinations
  design <- expand.grid(N = N_sizes, DGM_types = DGM_types)
  
  return(design)
}

```

# Data generating Mechanism

## Apply Syntax
```{r}
apply_syntax <- function(DGM) {
  
  if (DGM == 1) {
    pop.model <- paste(
"
f1 =~ 1*Y1
f1 =~ 0.7*Y2
f1 =~ 0.7*Y3
f2 =~ 1*Y4
f2 =~ 0.7*Y5
f2 =~ 0.7*Y6
f3 =~ 1*Y7
f3 =~ 0.7*Y8
f3 =~ 0.7*Y9
f4 =~ 1*Y10
f4 =~ 0.7*Y11
f4 =~ 0.7*Y12
f5 =~ 1*Y13
f5 =~ 0.7*Y14
f5 =~ 0.7*Y15
Y1 ~~ 1.283*Y1
Y2 ~~ 0.629*Y2
Y3 ~~ 0.629*Y3
Y4 ~~ 1.283*Y4
Y5 ~~ 0.629*Y5
Y6 ~~ 0.629*Y6
Y7 ~~ 1.314*Y7
Y8 ~~ 0.644*Y8
Y9 ~~ 0.644*Y9
Y10 ~~ 1.296*Y10
Y11 ~~ 0.635*Y11
Y12 ~~ 0.635*Y12
Y13 ~~ 1.318*Y13
Y14 ~~ 0.646*Y14
Y15 ~~ 0.646*Y15
f1 ~~ 1*f1
f2 ~~ 1*f2
f3 ~~ 0.99*f3
f4 ~~ 0.99*f4
f5 ~~ 0.99*f5
f3 ~ 0.1*f1
f4 ~ 0.1*f1
f5 ~ 0.1*f1
f3 ~ 0.1*f2
f4 ~ 0.1*f2
f5 ~ 0.1*f3
f3 ~ 0.1*f4
f5 ~ 0.1*f4",
    sep = "\n"
  ) 
  }
  
  if (DGM == 2) {
    pop.model <- paste(
"
f1 =~ 1*Y1
f1 =~ 0.7*Y2
f1 =~ 0.7*Y3
f1 =~ 0*Y14
f2 =~ 1*Y4
f2 =~ 0.63*Y2
f2 =~ 0.7*Y5
f2 =~ 0.7*Y6
f3 =~ 1*Y7
f3 =~ 0.63*Y5
f3 =~ 0.7*Y8
f3 =~ 0.7*Y9
f4 =~ 1*Y10
f4 =~ 0.63*Y8
f4 =~ 0.7*Y11
f4 =~ 0.7*Y12
f5 =~ 1*Y13
f5 =~ 0*Y11
f5 =~ 0.7*Y14
f5 =~ 0.7*Y15
Y1 ~~ 1.283*Y1
Y2 ~~ 1.138*Y2
Y3 ~~ 0.629*Y3
Y4 ~~ 1.283*Y4
Y5 ~~ 1.275*Y5
Y6 ~~ 0.629*Y6
Y7 ~~ 1.314*Y7
Y8 ~~ 1.295*Y8
Y9 ~~ 0.644*Y9
Y10 ~~ 1.296*Y10
Y11 ~~ 0.635*Y11
Y12 ~~ 0.635*Y12
Y13 ~~ 1.318*Y13
Y14 ~~ 0.646*Y14
Y15 ~~ 0.646*Y15
f1 ~~ 1*f1
f2 ~~ 1*f2
f3 ~~ 0.99*f3
f4 ~~ 0.99*f4
f5 ~~ 0.99*f5
f3 ~ 0.1*f1
f4 ~ 0.1*f1
f5 ~ 0.1*f1
f3 ~ 0.1*f2
f4 ~ 0.1*f2
f5 ~ 0.1*f3
f3 ~ 0.1*f4
f5 ~ 0.1*f4",
    sep = "\n"
  ) 
}
 
  if (DGM == 3) {
    pop.model <- paste(
"
# syntax generated by lav_syntax_mlist()
f1 =~ 1*Y1
f1 =~ 0.7*Y2
f1 =~ 0.7*Y3
f2 =~ 1*Y4
f2 =~ 0.7*Y5
f2 =~ 0.7*Y6
f3 =~ 1*Y7
f3 =~ 0.7*Y8
f3 =~ 0.7*Y9
f4 =~ 1*Y10
f4 =~ 0.7*Y11
f4 =~ 0.7*Y12
f5 =~ 1*Y13
f5 =~ 0.7*Y14
f5 =~ 0.7*Y15
Y1 ~~ 1.283*Y1
Y2 ~~ 0.629*Y2
Y3 ~~ 0.629*Y3
Y4 ~~ 1.283*Y4
Y2 ~~ 0.377*Y5
Y5 ~~ 0.629*Y5
Y3 ~~ 0.377*Y6
Y6 ~~ 0.629*Y6
Y7 ~~ 1.314*Y7
Y2 ~~ 0.377*Y8
Y5 ~~ 0.377*Y8
Y8 ~~ 0.644*Y8
Y3 ~~ 0.377*Y9
Y6 ~~ 0.377*Y9
Y9 ~~ 0.644*Y9
Y10 ~~ 1.296*Y10
Y2 ~~ 0.377*Y11
Y5 ~~ 0.377*Y11
Y8 ~~ 0.377*Y11
Y10 ~~ 0.635*Y11
Y3 ~~ 0.377*Y12
Y6 ~~ 0.377*Y12
Y9 ~~ 0.377*Y12
Y12 ~~ 0.635*Y12
Y13 ~~ 1.318*Y13
Y2 ~~ 0.377*Y14
Y5 ~~ 0.377*Y14
Y8 ~~ 0.377*Y14
Y11 ~~ 0.377*Y14
Y14 ~~ 0.646*Y14
Y3 ~~ 0.377*Y15
Y6 ~~ 0.377*Y15
Y9 ~~ 0.377*Y15
Y12 ~~ 0.377*Y15
Y15 ~~ 0.646*Y15
f1 ~~ 1*f1
f2 ~~ 1*f2
f3 ~~ 0.99*f3
f4 ~~ 0.99*f4
f5 ~~ 0.99*f5
f3 ~ 0.1*f1
f4 ~ 0.1*f1
f5 ~ 0.1*f1
f3 ~ 0.1*f2
f4 ~ 0.1*f2
f5 ~ 0.1*f3
f3 ~ 0.1*f4
f5 ~ 0.1*f4",
    sep = "\n"
  ) 
}

  
  return(pop.model)
}

model_syntax <-apply_syntax(2)
cat(model_syntax)
```

# Simulate data
```{r}
simulate_data <- function(N, DGM) {
 # Get DGM parameters

  pop.model <- apply_syntax(DGM)
  
  df_dat <- simulateData(pop.model, sample.nobs = N)
  
  return(df_dat)
}

```

# Planned Analysis

```{r}
#Specify estimation methods of interest

estimators <- list(
  SEM_ML = \(d) lavaan::sem(model, data=d, estimator="ML", std.lv= TRUE),
  SEM_ULS = \(d) lavaan::sem(model, data=d, estimator="ULS", std.lv= TRUE),
  LSAM_ML = \(d) lavaan::sam(model, data=d, sam.method="local", estimator = "ML", std.lv= TRUE),
  LSAM_ULS = \(d)lavaan::sam(model, data=d, sam.method="local", estimator = "ULS", std.lv= TRUE)
)
# postprocess each model output
phi_patterns <- c("phi21", "phi31", "phi41", "phi51", "phi32", "phi42", "phi43", "phi52", "phi53", "phi54")

estimators <- map(estimators, ~compose(
  \(e) parameterEstimates(e) %>% filter(label %in% phi_patterns) %>% pull(est), 
  .
))

# apply all estimators to the same dataset
apply_estimators <- \(d) map(estimators, exec, d)

planned_analysis <- compose(apply_estimators, simulate_data)

#The arguments to planned_analysis() are always equivalent to the ones from simulate_data(), within one simulation
planned_analysis(100, 1)

```

```{r}
#Specify estimation methods of interest
models <- c("SEM_ML", "SEM_ULS", "LSAM_ML")

planned_analysis <- function(N, DGM, model, model_type) {
  dataset <- simulate_data(N, DGM)
  
  if (model_type == "SEM_ML") {
    fit <- lavaan::sem(model, data=dataset, estimator="ML", std.lv= TRUE)
  } else if (model_type == "SEM_ULS") {
    fit <- lavaan::sem(model, data=dataset, estimator="ULS", std.lv= TRUE)
  } else if (model_type == "LSAM_ML") {
    fit <- lavaan::sam(model, data=dataset, sam.method = "local", estimator = "ML", std.lv= TRUE)
  } else {
    stop("Unknown model type specified")
  }
  
  estimates <- parameterEstimates(fit)

  phi_patterns <- c("phi21", "phi31", "phi41", "phi51", "phi32", "phi42", "phi43", "phi52", "phi53", "phi54")
  phi_estimates <- sapply(phi_patterns, function(phi) {
    if (any(estimates$label == phi)) {
      return(estimates$est[estimates$label == phi])
    } else {
      return(NA)  # Return NA if the parameter wasn't found
    }
  }, simplify = FALSE, USE.NAMES = TRUE)
  
  return(phi_estimates)
}


```

#  Simulation Study
```{r}
simulation_study <- function(design, model, num_repetitions, true_phis, models) {
  results_list <- list()
  
  for(model_type in models) {
    for(i in 1:nrow(design)) {
      row <- design[i, ]
      biases_list <- vector("list", length = num_repetitions)
      squared_errors_list <- vector("list", length = num_repetitions)

      for(rep in 1:num_repetitions) {
        estimates_list <- planned_analysis(row$N, row$DGM_types, model, model_type)
        
        # Calculate biases for each phi and store them
        biases <- sapply(names(true_phis), function(phi) {
          if (!is.null(estimates_list[[phi]])) {
            abs(estimates_list[[phi]] - true_phis[phi])
          } else {
            NA  # Handle missing estimates
          }
        })
        biases_list[[rep]] <- biases
        
        # Store squared errors for each phi
        squared_errors <- sapply(names(true_phis), function(phi) {
          if (!is.null(estimates_list[[phi]])) {
            (estimates_list[[phi]] - true_phis[phi])^2
          } else {
            NA  # Handle missing estimates
          }
        })
        squared_errors_list[[rep]] <- squared_errors
      }
      
      # Flatten the lists to vectors and calculate AvgAbsBias for the current condition
      all_biases <- unlist(biases_list, use.names = FALSE)
      avg_abs_bias <- mean(all_biases, na.rm = TRUE)
      
      # Aggregate the squared errors across all repetitions for each phi, then calculate RMSE
      all_squared_errors <- do.call(rbind, squared_errors_list)
      mean_squared_error <- colMeans(all_squared_errors, na.rm = TRUE)
      avg_rmse <- sqrt(mean(mean_squared_error, na.rm = TRUE))
      
      # Store the results for the current combination of N, DGM, and ModelType
      results_list[[length(results_list) + 1]] <- data.frame(
        ModelType = model_type,
        N = row$N,
        DGM = row$DGM_types,
        AvgAbsBias = avg_abs_bias,
        AvgRMSE = avg_rmse,
        stringsAsFactors = FALSE
      )
    }
  }
  
  # Combine all results into a single data frame
  results_df <- do.call(rbind, results_list)
  return(results_df)
}

```

## RUN
```{r}
design <- setup_design()

true_phis <- c(phi21 = 0.00, phi31 = 0.11, phi32 = 0.11, phi41 = 0.10, phi42 = 0.10, phi43 = 0.12, phi51 = 0.12, phi52 = 0.02, phi53 = 0.12, phi54 = 0.12)

models <- c("SEM_ML", "SEM_ULS", "LSAM_ML")

num_repetitions <- 2

# Execute the simulation study
results_df <- simulation_study(design, model, num_repetitions, true_phis, models)

# View the results
print(results_df)


```
Warnings can be ignored, as we are not interested in fit indices.

# Report analysis
```{r}
report_analysis <- function(results_df, models) {
  # Initialize a list to store tables
  tables_list <- list()

  # Unique DGM values from the results
  unique_dgms <- unique(results_df$DGM)

  # Create Bias and RMSE tables for each DGM
  for(dgm in unique_dgms) {
    # Filter results for the current DGM
    results_dgm <- filter(results_df, DGM == dgm)
    
    #As factor to be able to arrange later
    results_dgm$ModelType <- factor(results_dgm$ModelType, levels = models)
    
    # Bias table for the current DGM
    bias_table <- results_dgm %>%
      select(ModelType, N, AvgAbsBias) %>%
      pivot_wider(names_from = N, values_from = AvgAbsBias) %>%
      arrange(ModelType)
    
    # RMSE table for the current DGM
    rmse_table <- results_dgm %>%
      select(ModelType, N, AvgRMSE) %>%
      pivot_wider(names_from = N, values_from = AvgRMSE) %>%
      arrange(ModelType)
    
    # Store tables in the list with names indicating the DGM
    tables_list[[paste("Bias_DGM", dgm)]] <- bias_table
    tables_list[[paste("RMSE_DGM", dgm)]] <- rmse_table
  }
  
  return(tables_list)
}


list_of_tables <- report_analysis(results_df, models)

# Access a specific table
bias_dgm1 <- list_of_tables[["Bias_DGM 1"]]

#display all tables
report_analysis(results_df, models)
```


