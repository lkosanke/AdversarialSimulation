# First script for Simulation Study 1

Used for writing or coding?


```{r}
set.seed(1)
```



# Packages

Copied and pasted from original paper.

```{r}
library(GPArotation) 
library(CDM)
library(miceadds)
library(TAM)
library(sirt)
library(lavaan)

#new packages
library(dplyr)
library(tidyr)
```

# Source relevant R Functions

# Specify 2-factor-Model
label is missing for "phi", but not relevant anyway, as multiple factor correlations?
Have to look into define_fr1() function to see which parameters exactly are extracted how

```{r}
model <- "

f1 =~ 1*y1
f1 =~ 0.7*y2
f1 =~ 0.7*y3
f2 =~ 1*y4
f2 =~ 0.7*y5
f2 =~ 0.7*y6
f3 =~ 1*y7
f3 =~ 0.7*y8
f3 =~ 0.7*y9
f4 =~ 1*y10
f4 =~ 0.7*y11
f4 =~ 0.7*y12
f5 =~ 1*y13
f5 =~ 0.7*y14
f5 =~ 0.7*y15
y1 ~~ 1.283*y1
y2 ~~ 0.629*y2
y3 ~~ 0.629*y3
y4 ~~ 1.283*y4
y5 ~~ 0.629*y5
y6 ~~ 0.629*y6
y7 ~~ 1.314*y7
y8 ~~ 0.644*y8
y9 ~~ 0.644*y9
y10 ~~ 1.296*y10
y11 ~~ 0.635*y11
y12 ~~ 0.635*y12
y13 ~~ 1.318*y13
y14 ~~ 0.646*y14
y15 ~~ 0.646*y15
f1 ~~ 1*f1
f2 ~~ 1*f2
f3 ~~ 0.99*f3
f4 ~~ 0.99*f4
f5 ~~ 0.99*f5
f3 ~ 0.1*f1
f4 ~ 0.1*f1
f5 ~ 0.1*f1
f3 ~ 0.1*f2
f4 ~ 0.1*f2
f5 ~ 0.1*f3
f3 ~ 0.1*f4
f5 ~ 0.1*f4
    "
```

# Setup and Design

```{r}
setup_design <- function() {
  # Sample sizes
  N_sizes <- c(50, 100, 250, 500, 1000, 2500, 10^5)
  
  # DGM conditions
  DGM_types <- c(1,2,3)
  
  # Expand grid to create a data frame of all combinations
  design <- expand.grid(N_sizes = N_sizes, DGM_types = DGM_types)
  
  return(design)
}

```

# Get Data generating Mechanisms
```{r}
#Set up DGM's 1-3 as list
covmat_list <- list()
covmat_list[[1]] <- read.table("rl_simulation_true_model1__COVMAT.txt", header=TRUE)
covmat_list[[2]] <- read.table("rl_simulation_true_model2__COVMAT.txt", header=TRUE)
covmat_list[[3]] <- read.table("rl_simulation_true_model3__COVMAT.txt", header=TRUE)

```

# Simulate data
```{r}
simulate_data <- function(N, DGM) {
  
  S <- covmat_list[[DGM]]
  
  # Number of variables is the number of columns in the covariance matrix
  NV <- ncol(S)
  
  # Generate data
  dat <- MASS::mvrnorm(n = N, mu = rep(0, NV), Sigma = S)
  df_dat <- as.data.frame(dat)
  
  return(df_dat)
}

```

# Planned Analysis
Here, I need to include the model variation for the 3 DGM

```{r}
#Specify estimation methods of interest
models <- c("SEM_ML", "LSAM_ML", "GSAM_ML")

# Planned analysis

planned_analysis <- function(N, DGM, model, model_type) {
  dataset <- simulate_data(N, DGM)$Data
  
  if (model_type == "SEM_ML") {
    fit <- lavaan::sem(model, data=dataset, estimator="ML", std.lv= TRUE)
  } else if (model_type == "LSAM_ML") {
    fit <- lavaan::sam(model, data=dataset, sam.method="local", estimator = "ML", std.lv= TRUE)
  } else if (model_type == "GSAM_ML") {
    fit <- lavaan::sam(model, data=dataset, sam.method = "global", estimator = "ML", std.lv= TRUE)
  } else {
    stop("Unknown model type specified")
  }
  
  estimates <- parameterEstimates(fit)
  phi_estimate <- subset(estimates, label == "phi")$est
  return(phi_estimate)
}


```

#  Simulation Study
```{r}
simulation_study <- function(design, model, num_repetitions , true_phi, models) {
  # Initialize an empty dataframe to store the results
  results_df <- data.frame(
    ModelType = character(),
    N = integer(),
    DGM = integer(),
    AvgAbsBias = numeric(),
    RMSEPhi = numeric(),
    stringsAsFactors = FALSE
  )
  
  for(model_type in models) {
    for(i in 1:nrow(design)) {
      row <- design[i, ]
      phi_estimates <- replicate(num_repetitions, {
        planned_analysis(row$N_sizes, row$DGM_types, model, model_type)
      })
      
      # Compute the metrics directly
      avg_abs_bias <- mean(abs(phi_estimates - true_phi))
      rmse_phi <- sqrt(mean((phi_estimates - true_phi)^2))
      
      # Combine the results into a single row
      results_row <- data.frame(
        ModelType = model_type,
        N = row$N_sizes,
        DGM = row$DGM_types,
        AvgAbsBias = avg_abs_bias,
        RMSEPhi = rmse_phi
      )
      
      # Bind the row to the results dataframe
      results_df <- rbind(results_df, results_row)
    }
  }
  
  return(results_df)
}




```

## RUN
```{r}
design <- setup_design()
true_phi <- 0.6  # True value of phi
models <- c("SEM_ML", "LSAM_ML", "GSAM_ML")
num_repetitions <- 2

# Execute the simulation study
results_df <- simulation_study(design, model, num_repetitions, true_phi, models)

# View the results
print(results_df)


```

# Report analysis
```{r}
report_analysis <- function(results_df, models) {
  # Define the list to store the tables
  tables_list <- list()

  # Define the different RC conditions and the corresponding labels
  unique_rc <- unique(results_df$RC)
  unique_psi <- unique(results_df$PsiValue)

  # Define metric names to iterate over
  metrics <- c("Bias", "SD", "RMSE")

  # Loop through each RC condition and PsiValue to create separate tables for each metric
  for (rc in unique_rc) {
    for (psi in unique_psi) {
      # Skip creation for non-existing conditions (RC == 0 and PsiValue is negative)
      if (rc == 0 && psi < 0) {
        next
      }
      
      # Filter for the current RC and PsiValue
      subset_df <- results_df %>%
        filter(RC == rc, PsiValue == psi) %>%
        mutate(ModelType = factor(ModelType, levels = models)) # Use the models object here

      # Loop through each metric to pivot and create tables
      for (metric in metrics) {
        metric_colnames <- grep(metric, names(subset_df), value = TRUE)
        
        # Pivot the dataframe to a wide format for the current metric and reorder rows
        wide_df <- subset_df %>%
          select(ModelType, N, all_of(metric_colnames)) %>%
          arrange(ModelType) %>% # Arrange rows by ModelType
          pivot_longer(cols = all_of(metric_colnames), names_to = "Metric", values_to = "Value") %>%
          mutate(Value = round(Value, 2)) %>% # Round the values
          pivot_wider(names_from = N, values_from = Value) %>%
          select(-Metric)
        
        # Generate the table name based on the condition and metric
        psi_label <- ifelse(psi == 0, "0", ifelse(psi > 0, "pos", "neg"))
        condition_label <- paste(rc, psi_label, "res", sep = "_")
        table_name <- paste(metric, condition_label, sep = "_")
        
        # Store the table in the list with the corrected naming
        tables_list[[table_name]] <- wide_df
      }
    }
  }
  
  return(tables_list)
}

list_of_tables <- report_analysis(results_df, models)

# Access a specific table
bias_no_res_table <- list_of_tables[["Bias_0_pos_res"]] # Example for Bias with no residual correlations

#display all tables
report_analysis(results_df, models)
```


# Questions
Open questions: 
- What with this?

if (N<inf_val){
    dat <- MASS::mvrnorm(n=N, mu=rep(0,6), Sigma=S)
    S <- cov(dat) * (N-1) / N
}

- How exactly do we compute Bias, SD and RMSE for the estimated factor correlation?
Absolute vs. relative vs. mean bias in first studies?
```{r}
#Performance measures need to be extracted for each condition
#Below, just mathematical computation, does not work so commented out

#average_absolute_bias <- mean(abs(estimates - true_values))
#average_relative_bias <- mean((estimates - true_values) / true_values) 
```







