# First script for Simulation Study 1

Used for writing or coding?


```{r}
set.seed(1)
```



# Packages

Copied and pasted from original paper.

```{r}
library(GPArotation) 
library(CDM)
library(miceadds)
library(TAM)
library(sirt)
library(lavaan)

#new packages
library(dplyr)
library(tidyr)
```

# Source relevant R Functions

# Specify 2-factor-Model
label is missing for "phi", but not relevant anyway, as multiple factor correlations?
Have to look into define_fr1() function to see which parameters exactly are extracted how

I think the model has to be a standard 5 factor model with std.lv as before, so fixed latent variance, only positive loadings and residual variances.

```{r}
model <- "

#Structural part
    F1 =~ l1*y1 + l2*y2 + l3*y3
    F2 =~ l4*y4 + l5*y5 + l6*y6
    F3 =~ l7*y7 + l8*y8 + l9*y9
    F4 =~ l10*y10 + l11*y11 + l12*y12
    F5 =~ l13*y13 + l14*y14 + l15*y15
    
#Fixed latent variances    
    F1 ~~ 1*F1    
    F2 ~~ 1*F2
    F3 ~~ 1*F3
    F4 ~~ 1*F4
    F5 ~~ 1*F5
    
#Covariances
    F1 ~~ phi21*F2
    F2 ~~ phi52*F5
    
#Regressions
    F3 ~ phi31*F1
    F4 ~ phi41*F1
    F5 ~ phi51*F1
    F3 ~ phi32*F2
    F4 ~ phi42*F2
    F5 ~ phi53*F3
    F3 ~ phi43*F4
    F5 ~ phi54*F4

#Measurement part    
    y1 ~~ vY1*y1
    y2 ~~ vY2*y2    
    y3 ~~ vY3*y3
    y4 ~~ vY4*y4
    y5 ~~ vY5*y5    
    y6 ~~ vY6*y6
    y7 ~~ vY7*y7
    y8 ~~ vY8*y8
    y9 ~~ vY9*y9
    y10 ~~ vY10*y10
    y11 ~~ vY11*y11
    y12 ~~ vY12*y12
    y13 ~~ vY13*y13
    y14 ~~ vY14*y14
    y15 ~~ vY15*y15

#only positive loadings    
    l1 > 0.01          
    l2 > 0.01    
    l3 > 0.01
    l4 > 0.01
    l5 > 0.01
    l6 > 0.01
    l7 > 0.01
    l8 > 0.01
    l9 > 0.01
    l10 > 0.01
    l11 > 0.01
    l12 > 0.01
    l13 > 0.01
    l14 > 0.01
    l15 > 0.01
    
#only positive variances    
    vY1 > 0.01    
    vY2 > 0.01    
    vY3 > 0.01
    vY4 > 0.01
    vY5 > 0.01    
    vY6 > 0.01
    vY7 > 0.01
    vY8 > 0.01
    vY9 > 0.01
    vY10 > 0.01
    vY11 > 0.01
    vY12 > 0.01
    vY13 > 0.01
    vY14 > 0.01
    vY15 > 0.01
    
    "


```

# Setup and Design

```{r}
setup_design <- function() {
  # Sample sizes
  N_sizes <- c(50, 100, 250, 500, 1000, 2500, 10^5)
  
  # DGM conditions
  DGM_types <- c(1,2,3)
  
  # Expand grid to create a data frame of all combinations
  design <- expand.grid(N_sizes = N_sizes, DGM_types = DGM_types)
  
  return(design)
}

```

# Get Data generating Mechanisms
```{r}
#Set up DGM's 1-3 as list
covmat_list <- list()
covmat_list[[1]] <- read.table("rl_simulation_true_model1__COVMAT.txt", header=TRUE)
covmat_list[[2]] <- read.table("rl_simulation_true_model2__COVMAT.txt", header=TRUE)
covmat_list[[3]] <- read.table("rl_simulation_true_model3__COVMAT.txt", header=TRUE)

```

# Simulate data
```{r}
simulate_data <- function(N, DGM) {
  
  S <- covmat_list[[ DGM ]]
  
  # Number of variables is the number of columns in the covariance matrix
  NV <- ncol(S)
  
  # Generate data
  dat <- MASS::mvrnorm(n = N, mu = rep(0, NV), Sigma = S)
  df_dat <- as.data.frame(dat)
  
  return(df_dat)
}

```

# Planned Analysis
Here, I need to include the model variation for the 3 DGM

```{r}
#Specify estimation methods of interest
models <- c("SEM_ML", "SEM_ULS", "LSAM_ML")

planned_analysis <- function(N, DGM, model, model_type) {
  dataset <- simulate_data(N, DGM)
  
  if (model_type == "SEM_ML") {
    fit <- lavaan::sem(model, data=dataset, estimator="ML", std.lv= TRUE)
  } else if (model_type == "SEM_ULS") {
    fit <- lavaan::sem(model, data=dataset, estimator="ULS", std.lv= TRUE)
  } else if (model_type == "LSAM_ML") {
    fit <- lavaan::sam(model, data=dataset, sam.method = "local", estimator = "ML", std.lv= TRUE)
  } else {
    stop("Unknown model type specified")
  }
  
  estimates <- parameterEstimates(fit)

  phi_patterns <- c("phi21", "phi31", "phi41", "phi51", "phi32", "phi42", "phi43", "phi52", "phi53", "phi54")
  phi_estimates <- sapply(phi_patterns, function(phi) {
    if (any(estimates$label == phi)) {
      return(estimates$est[estimates$label == phi])
    } else {
      return(NA)  # Return NA if the parameter wasn't found
    }
  }, simplify = FALSE, USE.NAMES = TRUE)
  
  return(phi_estimates)
}


```

#  Simulation Study
```{r}
simulation_study <- function(design, model, num_repetitions, true_phis, models) {
  results_list <- list()
  
  for(model_type in models) {
    for(i in 1:nrow(design)) {
      row <- design[i, ]
      biases_list <- vector("list", length = num_repetitions)
      squared_errors_list <- vector("list", length = num_repetitions)

      for(rep in 1:num_repetitions) {
        estimates_list <- planned_analysis(row$N_sizes, row$DGM_types, model, model_type)
        
        # Calculate biases for each phi and store them
        biases <- sapply(names(true_phis), function(phi) {
          if (!is.null(estimates_list[[phi]])) {
            abs(estimates_list[[phi]] - true_phis[phi])
          } else {
            NA  # Handle missing estimates
          }
        })
        biases_list[[rep]] <- biases
        
        # Store squared errors for each phi
        squared_errors <- sapply(names(true_phis), function(phi) {
          if (!is.null(estimates_list[[phi]])) {
            (estimates_list[[phi]] - true_phis[phi])^2
          } else {
            NA  # Handle missing estimates
          }
        })
        squared_errors_list[[rep]] <- squared_errors
      }
      
      # Flatten the lists to vectors and calculate AvgAbsBias for the current condition
      all_biases <- unlist(biases_list, use.names = FALSE)
      avg_abs_bias <- mean(all_biases, na.rm = TRUE)
      
      # Aggregate the squared errors across all repetitions for each phi, then calculate RMSE
      all_squared_errors <- do.call(rbind, squared_errors_list)
      mean_squared_error <- colMeans(all_squared_errors, na.rm = TRUE)
      avg_rmse <- sqrt(mean(mean_squared_error, na.rm = TRUE))
      
      # Store the results for the current combination of N, DGM, and ModelType
      results_list[[length(results_list) + 1]] <- data.frame(
        ModelType = model_type,
        N = row$N_sizes,
        DGM = row$DGM_types,
        AvgAbsBias = avg_abs_bias,
        AvgRMSE = avg_rmse,
        stringsAsFactors = FALSE
      )
    }
  }
  
  # Combine all results into a single data frame
  results_df <- do.call(rbind, results_list)
  return(results_df)
}






```

## RUN
```{r}
design <- setup_design()

true_phis <- c(phi21 = 0.00, phi31 = 0.11, phi32 = 0.11, phi41 = 0.10, phi42 = 0.10, phi43 = 0.12, phi51 = 0.12, phi52 = 0.02, phi53 = 0.12, phi54 = 0.12)

models <- c("SEM_ML", "SEM_ULS", "LSAM_ML")

num_repetitions <- 2

# Execute the simulation study
results_df <- simulation_study(design, model, num_repetitions, true_phis, models)

# View the results
print(results_df)


```
Warnings can be ignored, as we are not interested in fit indices.

# Report analysis
```{r}
report_analysis <- function(results_df, models) {
  # Initialize a list to store tables
  tables_list <- list()

  # Unique DGM values from the results
  unique_dgms <- unique(results_df$DGM)

  # Create Bias and RMSE tables for each DGM
  for(dgm in unique_dgms) {
    # Filter results for the current DGM
    results_dgm <- filter(results_df, DGM == dgm)
    
    #As factor to be able to arrange later
    results_dgm$ModelType <- factor(results_dgm$ModelType, levels = models)
    
    # Bias table for the current DGM
    bias_table <- results_dgm %>%
      select(ModelType, N, AvgAbsBias) %>%
      pivot_wider(names_from = N, values_from = AvgAbsBias) %>%
      arrange(ModelType)
    
    # RMSE table for the current DGM
    rmse_table <- results_dgm %>%
      select(ModelType, N, AvgRMSE) %>%
      pivot_wider(names_from = N, values_from = AvgRMSE) %>%
      arrange(ModelType)
    
    # Store tables in the list with names indicating the DGM
    tables_list[[paste("Bias_DGM", dgm)]] <- bias_table
    tables_list[[paste("RMSE_DGM", dgm)]] <- rmse_table
  }
  
  return(tables_list)
}


list_of_tables <- report_analysis(results_df, models)

# Access a specific table
bias_dgm1 <- list_of_tables[["Bias_DGM 1"]]

#display all tables
report_analysis(results_df, models)
```


# Questions
Open questions: 
- What with this?

if (N<inf_val){
    dat <- MASS::mvrnorm(n=N, mu=rep(0,6), Sigma=S)
    S <- cov(dat) * (N-1) / N
}

- How exactly do we compute Bias, SD and RMSE for the estimated factor correlation?
Absolute vs. relative vs. mean bias in first studies?
```{r}
#Performance measures need to be extracted for each condition
#Below, just mathematical computation, does not work so commented out

#average_absolute_bias <- mean(abs(estimates - true_values))
#average_relative_bias <- mean((estimates - true_values) / true_values) 
```







