# First script for Simulation Study 1

```{r}
set.seed(1)
```

# Packages

Copied and pasted from original paper.

```{r}
# Specify the libraries to load
libraries <- c("GPArotation", "CDM", "miceadds", "TAM", "sirt", "lavaan", "dplyr", "tidyr", "purrr", "tidyverse", "furrr")
# Set the R mirror to the cloud mirror of RStudio
options(repos = "https://cloud.r-project.org/")

# Load the libraries
for (library_name in libraries) {
  if (!require(library_name, character.only = TRUE)) {
    install.packages(library_name)
    library(library_name, character.only = TRUE)
  }
}
```

# Specify 5-factor-Model

```{r}
model <- "

#Structural part
    F1 =~ l1*Y1 + l2*Y2 + l3*Y3
    F2 =~ l4*Y4 + l5*Y5 + l6*Y6
    F3 =~ l7*Y7 + l8*Y8 + l9*Y9
    F4 =~ l10*Y10 + l11*Y11 + l12*Y12
    F5 =~ l13*Y13 + l14*Y14 + l15*Y15
    
#Fixed latent variances    
    F1 ~~ 1*F1    
    F2 ~~ 1*F2
    F3 ~~ 1*F3
    F4 ~~ 1*F4
    F5 ~~ 1*F5
    
#Regressions
    F3 ~ phi31*F1
    F4 ~ phi41*F1
    F5 ~ phi51*F1
    F3 ~ phi32*F2
    F4 ~ phi42*F2
    F5 ~ phi53*F3
    F3 ~ phi43*F4
    F5 ~ phi54*F4

#Measurement part    
    Y1 ~~ vY1*Y1
    Y2 ~~ vY2*Y2    
    Y3 ~~ vY3*Y3
    Y4 ~~ vY4*Y4
    Y5 ~~ vY5*Y5    
    Y6 ~~ vY6*Y6
    Y7 ~~ vY7*Y7
    Y8 ~~ vY8*Y8
    Y9 ~~ vY9*Y9
    Y10 ~~ vY10*Y10
    Y11 ~~ vY11*Y11
    Y12 ~~ vY12*Y12
    Y13 ~~ vY13*Y13
    Y14 ~~ vY14*Y14
    Y15 ~~ vY15*Y15

#only positive loadings    
    l1 > 0.01          
    l2 > 0.01    
    l3 > 0.01
    l4 > 0.01
    l5 > 0.01
    l6 > 0.01
    l7 > 0.01
    l8 > 0.01
    l9 > 0.01
    l10 > 0.01
    l11 > 0.01
    l12 > 0.01
    l13 > 0.01
    l14 > 0.01
    l15 > 0.01
    
#only positive variances    
    vY1 > 0.01    
    vY2 > 0.01    
    vY3 > 0.01
    vY4 > 0.01
    vY5 > 0.01    
    vY6 > 0.01
    vY7 > 0.01
    vY8 > 0.01
    vY9 > 0.01
    vY10 > 0.01
    vY11 > 0.01
    vY12 > 0.01
    vY13 > 0.01
    vY14 > 0.01
    vY15 > 0.01
    
    "


```

# Setup and Design

```{r}
setup_design <- function() {
  # Sample sizes
  N_sizes <- c(50, 100, 250, 500, 1000, 2500, 10^5)
  
  # DGM conditions
  DGM_types <- c(1,2,3)
  
  # Expand grid to create a data frame of all combinations
  design <- expand.grid(N = N_sizes, DGM = DGM_types)
  
  return(design)
}

```

# Data generating Mechanism
## Fixed Values
```{r}
phi <- 0.1
```

## Apply Syntax
```{r}
apply_syntax <- function(DGM) {
  
  if (DGM == 1) {
    pop.model <- paste(
"
f1 =~ 1*Y1
f1 =~ 0.7*Y2
f1 =~ 0.7*Y3
f2 =~ 1*Y4
f2 =~ 0.7*Y5
f2 =~ 0.7*Y6
f3 =~ 1*Y7
f3 =~ 0.7*Y8
f3 =~ 0.7*Y9
f4 =~ 1*Y10
f4 =~ 0.7*Y11
f4 =~ 0.7*Y12
f5 =~ 1*Y13
f5 =~ 0.7*Y14
f5 =~ 0.7*Y15
Y1 ~~ 1.283*Y1
Y2 ~~ 0.629*Y2
Y3 ~~ 0.629*Y3
Y4 ~~ 1.283*Y4
Y5 ~~ 0.629*Y5
Y6 ~~ 0.629*Y6
Y7 ~~ 1.314*Y7
Y8 ~~ 0.644*Y8
Y9 ~~ 0.644*Y9
Y10 ~~ 1.296*Y10
Y11 ~~ 0.635*Y11
Y12 ~~ 0.635*Y12
Y13 ~~ 1.318*Y13
Y14 ~~ 0.646*Y14
Y15 ~~ 0.646*Y15
f1 ~~ 1*f1
f2 ~~ 1*f2
f3 ~~ 0.99*f3
f4 ~~ 0.99*f4
f5 ~~ 0.99*f5
f3 ~ 0.1*f1
f4 ~ 0.1*f1
f5 ~ 0.1*f1
f3 ~ 0.1*f2
f4 ~ 0.1*f2
f5 ~ 0.1*f3
f3 ~ 0.1*f4
f5 ~ 0.1*f4",
    sep = "\n"
  ) 
  }
  
  if (DGM == 2) {
    pop.model <- paste(
"
f1 =~ 1*Y1
f1 =~ 0.7*Y2
f1 =~ 0.7*Y3
f1 =~ 0*Y14
f2 =~ 1*Y4
f2 =~ 0.63*Y2
f2 =~ 0.7*Y5
f2 =~ 0.7*Y6
f3 =~ 1*Y7
f3 =~ 0.63*Y5
f3 =~ 0.7*Y8
f3 =~ 0.7*Y9
f4 =~ 1*Y10
f4 =~ 0.63*Y8
f4 =~ 0.7*Y11
f4 =~ 0.7*Y12
f5 =~ 1*Y13
f5 =~ 0*Y11
f5 =~ 0.7*Y14
f5 =~ 0.7*Y15
Y1 ~~ 1.283*Y1
Y2 ~~ 1.138*Y2
Y3 ~~ 0.629*Y3
Y4 ~~ 1.283*Y4
Y5 ~~ 1.275*Y5
Y6 ~~ 0.629*Y6
Y7 ~~ 1.314*Y7
Y8 ~~ 1.295*Y8
Y9 ~~ 0.644*Y9
Y10 ~~ 1.296*Y10
Y11 ~~ 0.635*Y11
Y12 ~~ 0.635*Y12
Y13 ~~ 1.318*Y13
Y14 ~~ 0.646*Y14
Y15 ~~ 0.646*Y15
f1 ~~ 1*f1
f2 ~~ 1*f2
f3 ~~ 0.99*f3
f4 ~~ 0.99*f4
f5 ~~ 0.99*f5
f3 ~ 0.1*f1
f4 ~ 0.1*f1
f5 ~ 0.1*f1
f3 ~ 0.1*f2
f4 ~ 0.1*f2
f5 ~ 0.1*f3
f3 ~ 0.1*f4
f5 ~ 0.1*f4",
    sep = "\n"
  ) 
}
 
  if (DGM == 3) {
    pop.model <- paste(
"
# syntax generated by lav_syntax_mlist()
f1 =~ 1*Y1
f1 =~ 0.7*Y2
f1 =~ 0.7*Y3
f2 =~ 1*Y4
f2 =~ 0.7*Y5
f2 =~ 0.7*Y6
f3 =~ 1*Y7
f3 =~ 0.7*Y8
f3 =~ 0.7*Y9
f4 =~ 1*Y10
f4 =~ 0.7*Y11
f4 =~ 0.7*Y12
f5 =~ 1*Y13
f5 =~ 0.7*Y14
f5 =~ 0.7*Y15
Y1 ~~ 1.283*Y1
Y2 ~~ 0.629*Y2
Y3 ~~ 0.629*Y3
Y4 ~~ 1.283*Y4
Y2 ~~ 0.377*Y5
Y5 ~~ 0.629*Y5
Y3 ~~ 0.377*Y6
Y6 ~~ 0.629*Y6
Y7 ~~ 1.314*Y7
Y2 ~~ 0.377*Y8
Y5 ~~ 0.377*Y8
Y8 ~~ 0.644*Y8
Y3 ~~ 0.377*Y9
Y6 ~~ 0.377*Y9
Y9 ~~ 0.644*Y9
Y10 ~~ 1.296*Y10
Y2 ~~ 0.377*Y11
Y5 ~~ 0.377*Y11
Y8 ~~ 0.377*Y11
Y10 ~~ 0.635*Y11
Y3 ~~ 0.377*Y12
Y6 ~~ 0.377*Y12
Y9 ~~ 0.377*Y12
Y12 ~~ 0.635*Y12
Y13 ~~ 1.318*Y13
Y2 ~~ 0.377*Y14
Y5 ~~ 0.377*Y14
Y8 ~~ 0.377*Y14
Y11 ~~ 0.377*Y14
Y14 ~~ 0.646*Y14
Y3 ~~ 0.377*Y15
Y6 ~~ 0.377*Y15
Y9 ~~ 0.377*Y15
Y12 ~~ 0.377*Y15
Y15 ~~ 0.646*Y15
f1 ~~ 1*f1
f2 ~~ 1*f2
f3 ~~ 0.99*f3
f4 ~~ 0.99*f4
f5 ~~ 0.99*f5
f3 ~ 0.1*f1
f4 ~ 0.1*f1
f5 ~ 0.1*f1
f3 ~ 0.1*f2
f4 ~ 0.1*f2
f5 ~ 0.1*f3
f3 ~ 0.1*f4
f5 ~ 0.1*f4",
    sep = "\n"
  ) 
}

  
  return(pop.model)
}

model_syntax <-apply_syntax(2)
cat(model_syntax)
```

# Simulate data
```{r}
simulate_data <- function(N, DGM) {
 # Get DGM parameters

  pop.model <- apply_syntax(DGM)
  
  df_dat <- simulateData(pop.model, sample.nobs = N)
  
  return(df_dat)
}

```

# Planned Analysis

```{r}
#Specify estimation methods of interest

estimators <- list(
  SEM_ML = \(d) lavaan::sem(model, data=d, estimator="ML", std.lv= TRUE),
  SEM_ULS = \(d) lavaan::sem(model, data=d, estimator="ULS", std.lv= TRUE),
  LSAM_ML = \(d) lavaan::sam(model, data=d, sam.method="local", estimator = "ML", std.lv= TRUE)
)
# postprocess each model output
phi_patterns <- c("phi31", "phi41", "phi51", "phi32", "phi42", "phi43", "phi53", "phi54")

estimators <- map(estimators, ~compose(
  \(e) parameterEstimates(e) %>% filter(label %in% phi_patterns) %>% pull(est), 
  .
))

# apply all estimators to the same dataset
apply_estimators <- \(d) map(estimators, exec, d)

planned_analysis <- function(N,DGM){
  d <- simulate_data(N,DGM)
  results <- apply_estimators(d)
  
  return(tibble(
    SEM_ML = list(results$SEM_ML),
    SEM_ULS = list(results$SEM_ULS),
    LSAM_ML = list(results$LSAM_ML)
  ))
}
#The arguments to planned_analysis() are always equivalent to the ones from simulate_data(), within one simulation
a <- planned_analysis(100, 1)

```
# Extract results
```{r}
extract_results <- function(results_df_raw){

results_raw_combined <- results_df_raw %>%
  group_by(N, DGM) %>%
  summarise(across(c(SEM_ML, SEM_ULS, LSAM_ML), 
                   ~list(unlist(.))), 
            .groups = "drop")

  #Compute performance measures
results_metrics <- function(values) {
  list(
        abs_bias = mean(abs(values - phi)),
        rmse = sqrt(mean((values - phi)^2)),
        se_bias = sd(values - phi) / sqrt(length(values)),
        ci_lower = mean(values - phi) - qt(0.975, df = length(values) - 1) * sd(values - phi) / sqrt(length(values)),
        ci_upper = mean(values - phi) + qt(0.975, df = length(values) - 1) * sd(values - phi) / sqrt(length(values))
      )
}

metrics_list <- results_raw_combined %>%
  mutate(across(c(SEM_ML, SEM_ULS, LSAM_ML), ~future_map(.x, results_metrics), .names = "{.col}_metrics")) %>%
    select(-c(SEM_ML, SEM_ULS, LSAM_ML))  # Drop the original estimator columns

  return(metrics_list)
}

```

#  Simulation Study
```{r}

simulation_study_ <- function(design){
  all_steps <- mutate(design, !!!future_pmap_dfr(design, planned_analysis, .options = furrr_options(seed = TRUE)))
  all_steps
}

simulation_study <- function(design, k, seed = NULL) {
  # Define a function to run simulation_study_() safely
  safe_simulation <- function(design) {
    # Run the simulation function safely
    result <- quietly(safely(simulation_study_))(design)
    
    # Extract the output, errors, and warnings: Question: On which level do we want this? Do obtain the correct DF, triple indexing into safely() is  necessary.
    output <- if (!is.null(result$error)) NULL else result$result$result
    errors <- if (!is.null(result$error)) result$error else NULL
    warnings <- if (!is.null(result$warning)) result$warning else NULL
    messages <- result$message
    
    # Return a list with the output, errors, and warnings
    list(result = output, errors = errors, warnings = warnings, messages = messages)
  }
  
  # Run simulation_study_() k times, capturing errors and warnings
  results_list <- future_map(seq_len(k), ~safe_simulation(design), .options = furrr_options(seed = seed))
  
  # Extract result, errors, and warnings from the list
  results <- map_df(results_list, pluck, "result")
  errors <- map(results_list, pluck, "errors")
  warnings <- map(results_list, pluck, "warnings")
  messages <- map(results_list, pluck, "messages")
  
  # Combine results, errors, and warnings into a single data frame

  return(list(results = results, errors = errors, warnings = warnings, messages = messages))
}

```

## RUN
```{r}

#true_phis <- c(phi31 = 0.11, phi32 = 0.11, phi41 = 0.10, phi42 = 0.10, phi43 = 0.12, phi51 = 0.12, phi53 = 0.12, phi54 = 0.12)

#Set up design
design <- setup_design()

#Run simulation
results_sim <- simulation_study(design, 2, seed = TRUE)

#Errors, warnings and messages?
errors <- results_sim$errors
warnings <- results_sim$warnings
messages <- results_sim$messages

#Output and extract results
results_df_raw <- results_sim$results
metrics_list <- extract_results(results_df_raw)

#Report Bias
bias_ci <- report_bias(metrics_list)
bias_ci

```
Warnings can be ignored, as we are not interested in fit indices.

# Report Bias
```{r}
report_bias <- function(metrics_list) {
  # Define a list to store results
  bias_ci <- list()
  
  # Iterate over each condition in metrics_list
  
  for (i in seq_len(nrow(metrics_list))) {
    # Extract the metrics for SEM_ML from the current row
    sem_ml_metrics <- metrics_list$SEM_ML_metrics[[i]]
    
    # Extract abs_bias, ci_lower, and ci_upper
    abs_bias <- sem_ml_metrics$abs_bias
    ci_lower <- sem_ml_metrics$ci_lower
    ci_upper <- sem_ml_metrics$ci_upper
    
    # Format these values into a human-readable string
    bias_formatted <- sprintf("%.3f [%.3f, %.3f]", abs_bias, ci_lower, ci_upper)
    
    # Store this formatted string in a list with an appropriate name
    condition_name <- paste("N", metrics_list$N[i], "DGM", metrics_list$DGM[i], sep = "_")
    bias_ci[[condition_name]] <- bias_formatted
  }
  
  return(bias_ci)
}
```


