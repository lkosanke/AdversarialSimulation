# First script for Simulation Study 5

```{r}
set.seed(1)
```



# Packages

Copied and pasted from original paper.

```{r}
library(GPArotation)
library(CDM)
library(miceadds)
library(TAM)
library(sirt)
library(lavaan)

#new packages
library(dplyr)
library(tidyr)
```

# Source relevant R Functions

# Specify 2-factor-Model
```{r}
model <- "

#Structural part
    F1 =~ l1*X1 + l2*X2 + l3*X3
    F2 =~ l4*X4 + l5*X5 + l6*X6
    F3 =~ l7*X7 + l8*X8 + l9*X9
    F1 ~~ 1*F1    # Fixed latent variances
    F2 ~~ 1*F2    
    F3 ~~ 1*F3    
    F1 ~~ phi21*F2  # Phis
    F1 ~~ phi31*F3  
    F2 ~~ phi32*F3  
    phi21 < 0.99    # Phis between -1 and 1
    phi21 > -0.99
    phi31 < 0.99   
    phi31 > -0.99
    phi32 < 0.99    
    phi32 > -0.99

#Measurement part    
    X1 ~~ vX1*X1
    X2 ~~ vX2*X2    
    X3 ~~ vX3*X3
    X4 ~~ vX4*X4
    X5 ~~ vX5*X5    
    X6 ~~ vX6*X6
    X7 ~~ vX7*X7
    X8 ~~ vX8*X8
    X9 ~~ vX9*X9
    l1 > 0.01     #only positive loadings
    l2 > 0.01    
    l3 > 0.01
    l4 > 0.01
    l5 > 0.01
    l6 > 0.01
    l7 > 0.01
    l8 > 0.01
    l9 > 0.01
    vX1 > 0.01    #only positive variances
    vX2 > 0.01    
    vX3 > 0.01
    vX4 > 0.01
    vX5 > 0.01    
    vX6 > 0.01
    vX7 > 0.01
    vX8 > 0.01    
    vX9 > 0.01
    
    "
```

# Setup and Design

```{r}
setup_design <- function() {
  # Sample sizes
  N_sizes <- c(50, 100, 250, 500, 1000, 2500, 10^5)
  
  # Cross-loading conditions
  cl_conditions <- c(1, 2, 3)  
  
  
  # Factor correlations
  factor_correlations <- c(0,0.2,0.4,0.6)
  
  # Expand grid to create a data frame of all combinations
  design <- expand.grid(N_sizes = N_sizes, 
                        cl_condition = cl_conditions, 
                        phis = factor_correlations)


  return(design)
}


```

# Data generating Mechanism
```{r}
get_dgm <- function(cl, phis) {
  # Factor loadings as specified in your study
  lambda1 <- 0.6
  lambda2 <- 0.65
  lambda3 <- 0.55
  
  # Cross-loadings initialization
  delta1 <- 0.4  # δ1 is always set to 0.4
  delta2 <- ifelse(cl > 1, 0.4, 0)  # δ2 is 0.4 if cl_condition > 1
  delta3 <- ifelse(cl > 2, 0.4, 0)  # δ3 is 0.4 if cl_condition > 2
  
  # Loading matrix for three factors
  LAM <- matrix(0, nrow=9, ncol=3)
  LAM[1:3, 1] <- lambda1
  LAM[4:6, 2] <- lambda2
  LAM[7:9, 3] <- lambda3
  
  # Apply cross-loadings based on condition
  if (cl >= 1) LAM[1, 2] <- delta1
  if (cl >= 2) LAM[4, 3] <- delta2
  if (cl == 3) LAM[7, 1] <- delta3
  
  # Correlation matrix for factors
  PHI <- matrix(0, nrow=3, ncol=3)
  diag(PHI) <- 1
  PHI[upper.tri(PHI)] <- phis
  PHI[lower.tri(PHI)] <- phis
  
  return(list(LAM = LAM, PHI = PHI))
}



```

# Simulate data
```{r}
# Assuming dgm_params is obtained from get_dgm()
simulate_data <- function(N, cl, phis) {
  dgm_params <- get_dgm(cl, phis)
  LAM <- dgm_params$LAM
  PHI <- dgm_params$PHI
  
  # Calculate TR as LAM %*% PHI %*% t(LAM)
  TR <- LAM %*% PHI %*% t(LAM)
  
  # Initialize PSI and adjust for unique variances
  PSI <- matrix(0, nrow=9, ncol=9)
  diag(PSI) <- 1 - diag(TR)
  
  # Total covariance matrix S
  S <- TR + PSI
  
  # Generate simulated data based on the covariance matrix S
  dat <- MASS::mvrnorm(n = N, mu = rep(0, nrow(LAM)), Sigma = S, empirical = TRUE)
  df_dat <- as.data.frame(dat)
  colnames(df_dat) <- paste0("X", 1:9)  # Naming variables for clarity
  
  return(list(SampleSize = N, CL = cl, Phis = phis, Data = df_dat))
}



```

# Planned Analysis
```{r}
#Specify estimation methods of interest
models <- c("SEM_ULS", "LSAM_ULS")

# Planned analysis

planned_analysis <- function(N, cl, phis, model, model_type) {

  dataset <- simulate_data(N, cl, phis)$Data
  
  if (model_type == "SEM_ULS") {
    fit <- lavaan::sem(model, data=dataset, estimator="ULS", std.lv= TRUE)
  } else if (model_type == "LSAM_ULS") {
    fit <- lavaan::sam(model, data=dataset, sam.method="local", estimator = "ULS", std.lv= TRUE)
  } else {
    stop("Unknown model type specified")
  }
  
  estimates <- parameterEstimates(fit)

  # Define the patterns for the factor correlations we are interested in
  phi_patterns <- c("phi21", "phi31", "phi32")
  phi_estimates <- sapply(phi_patterns, function(phi) {
    if (any(estimates$label == phi)) {
      return(estimates$est[estimates$label == phi])
    } else {
      return(NA)  # Return NA if the parameter wasn't found
    }
  }, simplify = FALSE, USE.NAMES = TRUE)
  
  return(phi_estimates)
}


```

#  Simulation Study
```{r}
simulation_study <- function(design, model, num_repetitions, models) {
  results_list <- list()
  
  for (model_type in models) {
    for (i in 1:nrow(design)) {
      row <- design[i, ]
      biases_list <- vector("list", length = num_repetitions)

      for (rep in 1:num_repetitions) {
        estimates_list <- planned_analysis(row$N_sizes, row$cl, row$phis, model, model_type)
        
        # Calculate biases for each phi and store them
        biases <- sapply(names(phis), function(phi) {
          if (!is.null(estimates_list[[phi]])) {
            abs(estimates_list[[phi]] - phis[phi])
          } else {
            NA  # Handle missing estimates
          }
        })
        biases_list[[rep]] <- biases
      }
      
      # Aggregate biases
      all_biases <- do.call(c, biases_list)
      avg_abs_bias <- mean(all_biases, na.rm = TRUE)
      
      # Store the results for the current combination of conditions
      results_list[[length(results_list) + 1]] <- list(
        ModelType = model_type,
        N = row$N_sizes,
        CL = row$cl,
        Phis = paste(row$phis, collapse=", "),
        AvgAbsBias = avg_abs_bias
      )
    }
  }
  
  # Combine all results into a single data frame
  results_df <- do.call(rbind, lapply(results_list, data.frame, stringsAsFactors = FALSE))
  return(results_df)
}




```

## RUN
```{r}
design <- setup_design()
models <- c("SEM_ULS", "LSAM_ULS")  # Models to test
num_repetitions <- 2

# Execute the simulation study
results_df <- simulation_study(design, model, num_repetitions, true_phi, models)

# View the results
print(results_df)


```

# Report analysis
```{r}
report_analysis <- function(results_df, models) {
  # Define the list to store the tables
  tables_list <- list()

  # Define the unique CL conditions and delta values
  unique_cl <- unique(results_df$CL)
  unique_delta <- unique(results_df$DeltaValue)

  # Define metric names to iterate over
  metrics <- c("Bias", "SD", "RMSE")

  # Loop through each CL condition and deltaValue to create separate tables for each metric
  for (cl in unique_cl) {
    for (delta in unique_delta) {
      # Filter for the current CL and deltaValue
      subset_df <- results_df %>%
        filter(CL == cl, DeltaValue == delta) %>%
        mutate(ModelType = factor(ModelType, levels = models)) # Ensure ModelType order

      # Loop through each metric to pivot and create tables
      for (metric in metrics) {
        # Identify columns related to the current metric
        metric_colnames <- grep(metric, names(subset_df), value = TRUE)
        
        # Pivot the dataframe to a wide format for the current metric and reorder rows
        wide_df <- subset_df %>%
          select(ModelType, N, all_of(metric_colnames)) %>%
          arrange(ModelType) %>% # Arrange rows by ModelType
          pivot_longer(cols = all_of(metric_colnames), names_to = "Metric", values_to = "Value") %>%
          mutate(Value = round(Value, 2)) %>% # Round the values
          pivot_wider(names_from = N, values_from = Value) %>%
          select(-Metric)

        # Generate the table name based on the condition and metric
        condition_label <- paste("CL", cl, "Delta", delta, sep = "_")
        table_name <- paste(metric, condition_label, sep = "_")
        
        # Store the table in the list with the corrected naming
        tables_list[[table_name]] <- wide_df
      }
    }
  }
  
  return(tables_list)
}

# Assuming results_df and models are already defined
list_of_tables <- report_analysis(results_df, models)


# Access a specific table
bias_no_res_table <- list_of_tables[["Bias_CL_1_Delta_0.3"]] # Example for Bias with 1 cross-loading of value 0.3

#display all tables
report_analysis(results_df, models)
```


# Questions
Open questions: 

Am I sure that my results are correct? Different set of findings than simulation 1 (for 2 repetitions though).





