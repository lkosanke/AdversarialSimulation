# First script for Simulation Study 1

Used for writing or coding?

relevant components:

# Packages

Copied and pasted from original paper.

```{r}
library(GPArotation)
library(CDM)
library(miceadds)
library(TAM)
library(sirt)
library(lavaan)
```

# Set up file structure
```{r}
1+1


```

# Source relevant R Functions

# Specify 2-factor-Model
```{r}
model <- "

#Structural part
    FX =~ l1*X1 + l2*X2 + l3*X3
    FY =~ l4*Y1 + l5*Y2 + l6*Y3
    FX ~~ 1*FX    #Fixed latent variance
    FY ~~ 1*FY    #Fixed latent variance
    FX ~~ phi*FY
    phi < 0.99    #Phi between -1 and 1
    phi > -0.99

#Measurement part    
    X1 ~~ vX1*X1
    X2 ~~ vX2*X2    
    X3 ~~ vX3*X3
    Y1 ~~ vY1*Y1
    Y2 ~~ vY2*Y2    
    Y3 ~~ vY3*Y3
    l1 > 0.01     #only positive loadings
    l2 > 0.01    
    l3 > 0.01
    l4 > 0.01
    l5 > 0.01
    l6 > 0.01       
    vX1 > 0.01    #only positive variances
    vX2 > 0.01    
    vX3 > 0.01
    vY1 > 0.01
    vY2 > 0.01    
    vY3 > 0.01   
    "
```

# Set estimators
Dont know how to do gsam for ML and ULS seperately
```{r}

# SEM ML
mod1a <- lavaan::sem(model, sample.cov=S, sample.nobs=1e5, estimator="ML", std.lv= TRUE)

# SEM ULS
mod1a <- lavaan::sem(model, sample.cov=S, sample.nobs=1e5, estimator="ULS", std.lv= TRUE)

# LSAM ML
mod0a <- mod1a <- lavaan::sam(model, sample.cov=S, sample.nobs=1e5, sam.method="local", std.lv= TRUE,
                        local.options = list(M.method = "ML" ) )

#LSAM ULS
mod0a <- mod1a <- lavaan::sam(model, sample.cov=S, sample.nobs=1e5, sam.method="local", std.lv= TRUE,
                        local.options = list(M.method = "ULS" ) )

#GSAM
mod1a <- lavaan::sam(lavmodel, sample.cov=S, sample.nobs=1e5, sam.method="global", std.lv= TRUE)



```

# Data generating mechanism & Design
```{r}
simulate_data <- function() {
  # Define constants and matrices as outlined previously
  lam1 <- 0.55
  lam2 <- 0.45
  phi <- 0.60
  
  # Sample sizes
  N_sizes <- c(50, 100, 250, 500, 1000, 2500, 10^5)
  
  # Misspecification conditions: (0, 1, 2) correlated residuals, and psi values
  rc_conditions <- c(0, 1, 2)
  psi_values <- c(0.12, -0.12)
  
  results <- list()
  
  # Simulation loop
  simulation_id <- 1
  for (N in N_sizes) {
    for (rc in rc_conditions) {
      # When rc is 0, skip iterating over psi_values
      if (rc == 0) {
        psi_values_rc0 <- 0  # Use a placeholder psi_value since it's irrelevant
      } else {
        psi_values_rc0 <- psi_values
      }
      
      for (psi_value in psi_values_rc0) {
        # Setup matrices for this simulation
        LAM <- matrix(0, nrow=6, ncol=2)
        LAM[1:3, 1] <- lam1
        LAM[4:6, 2] <- lam2
        
        PHI <- matrix(0, nrow=2, ncol=2)
        diag(PHI) <- 1
        PHI[1, 2] <- PHI[2, 1] <- phi
        
        THETA <- diag(c(rep(1-lam1^2, 3), rep(1-lam2^2, 3)))
        
        # Adjust THETA for misspecification
        if (rc >= 1) {
          THETA[1, 4] <- THETA[4, 1] <- psi_value
        }
        if (rc == 2) {
          THETA[2, 5] <- THETA[5, 2] <- psi_value
        }
        
        S <- LAM %*% PHI %*% t(LAM) + THETA
        rownames(S) <- colnames(S) <- c( paste0("X",1:3), paste0("Y",1:3) )

        # Generate data
        dat <- MASS::mvrnorm(n = N, mu = rep(0, 6), Sigma = S)
        
        # Save the result
        results[[paste0("Simulation_", simulation_id)]] <- list(
          SampleSize = N,
          RC = rc,
          PsiValue = psi_value,
          Data = dat
        )
        simulation_id <- simulation_id + 1
      }
    }
  }
  
  return(results)
}


```

# Run Simulation (simulation_study)
```{r}

simulated_datasets <- simulate_data()

```

# Report? (report_analysis)
```{r}

```






