# First script for Simulation Study 6

```{r}
set.seed(1)
```



# Packages

Copied and pasted from original paper.

```{r}
library(GPArotation)
library(CDM)
library(miceadds)
library(TAM)
library(sirt)
library(lavaan)

#new packages
library(dplyr)
library(tidyr)
```


# Specify 3-factor-Model
```{r}
model <- "

#Structural part
    F1 =~ l1*X1 + l2*X2 + l3*X3
    F2 =~ l4*X4 + l5*X5 + l6*X6
    F3 =~ l7*X7 + l8*X8 + l9*X9
    F1 ~~ 1*F1    # Fixed latent variances
    F2 ~~ 1*F2    
    F3 ~~ 1*F3    
    F1 ~~ phi21*F2  # Phis
    F1 ~~ phi31*F3  
    F2 ~~ phi32*F3  
    phi21 < 0.99    # Phis between -1 and 1
    phi21 > -0.99
    phi31 < 0.99   
    phi31 > -0.99
    phi32 < 0.99    
    phi32 > -0.99

#Measurement part    
    X1 ~~ vX1*X1
    X2 ~~ vX2*X2    
    X3 ~~ vX3*X3
    X4 ~~ vX4*X4
    X5 ~~ vX5*X5    
    X6 ~~ vX6*X6
    X7 ~~ vX7*X7
    X8 ~~ vX8*X8
    X9 ~~ vX9*X9
    l1 > 0.01     #only positive loadings
    l2 > 0.01    
    l3 > 0.01
    l4 > 0.01
    l5 > 0.01
    l6 > 0.01
    l7 > 0.01
    l8 > 0.01
    l9 > 0.01
    vX1 > 0.01    #only positive variances
    vX2 > 0.01    
    vX3 > 0.01
    vX4 > 0.01
    vX5 > 0.01    
    vX6 > 0.01
    vX7 > 0.01
    vX8 > 0.01    
    vX9 > 0.01
    
    "
```

# Setup and Design

```{r}
setup_design <- function() {
  # Sample sizes
  N_sizes <- c(50, 100, 250, 500, 1000, 2500, 10^5)
  
  # Sizes of correlated residuals
  psi_values <- c(0.2, 0.4)
  
  # Factor correlations
  factor_correlations <- c(0,0.2,0.4,0.6)
  
  # Expand grid to create a data frame of all combinations
  design <- expand.grid(N_sizes = N_sizes, 
                        psi_values = psi_values, 
                        phis = factor_correlations)
  return(design)
}



```

# Data generating Mechanism
```{r}
get_dgm <- function(psi_value, phis) {

  lambda1 <- 0.6
  lambda2 <- 0.65
  lambda3 <- 0.55
  
  # Loading matrix
  LAM <- matrix(0, nrow=9, ncol=3)
  LAM[1:3, 1] <- lambda1
  LAM[4:6, 2] <- lambda2
  LAM[7:9, 3] <- lambda3
  
  # Correlation matrix for factors
  PHI <- matrix(0, nrow=3, ncol=3)
  diag(PHI) <- 1
  PHI[upper.tri(PHI)] <- phis
  PHI[lower.tri(PHI)] <- phis
  
  # Calculate the implied trait (factor) covariance matrix TR
  TR <- LAM %*% PHI %*% t(LAM)
  
  # Initialize PSI with unique variances
  PSI <- matrix(0, nrow=9, ncol=9)
  diag(PSI) <- 1 - diag(TR)  
  
  # Set the specified residual correlations
  PSI[1, 4] <- PSI[4, 1] <- psi_value
  PSI[2, 5] <- PSI[5, 2] <- psi_value
  PSI[3, 8] <- PSI[8, 3] <- psi_value
  
  return(list(LAM = LAM, PHI = PHI, PSI = PSI))
}




```

# Simulate data
```{r}
simulate_data <- function(N, psi_value, phis) {
  # Obtain the data generating model parameters
  dgm_params <- get_dgm(psi_value, phis)
  LAM <- dgm_params$LAM
  PHI <- dgm_params$PHI
  PSI <- dgm_params$PSI
  
  # Calculate covariance matrix (S) 
  TR <- LAM %*% PHI %*% t(LAM)
  S <- TR + PSI
  
  # Generate simulated data 
  dat <- MASS::mvrnorm(n = N, mu = rep(0, nrow(LAM)), Sigma = S, empirical = TRUE)
  df_dat <- as.data.frame(dat)
  colnames(df_dat) <- paste0("X", 1:9)  
  
  return(list(SampleSize = N, PsiValue = psi_value, Phis = phis, Data = df_dat))
}

```

# Planned Analysis
```{r}
#Specify estimation methods of interest
models <- c("SEM_ULS", "LSAM_ULS")

planned_analysis <- function(N, psi_value, phis, model, model_type) {

  dataset <- simulate_data(N, psi_value, phis)$Data
  
  if (model_type == "SEM_ULS") {
    fit <- lavaan::sem(model, data=dataset, estimator="ULS", std.lv= TRUE)
  } else if (model_type == "LSAM_ULS") {
    fit <- lavaan::sam(model, data=dataset, sam.method="local", estimator = "ULS", std.lv= TRUE)
  } else {
    stop("Unknown model type specified")
  }
  
  estimates <- parameterEstimates(fit)

  # Define the patterns for the factor correlations we are interested in
  phi_patterns <- c("phi21", "phi31", "phi32")
  phi_estimates <- sapply(phi_patterns, function(phi) {
    if (any(estimates$label == phi)) {
      return(estimates$est[estimates$label == phi])
    } else {
      return(NA)  # Return NA if the parameter wasn't found
    }
  }, simplify = FALSE, USE.NAMES = TRUE)
  
  return(phi_estimates)
}


```

#  Simulation Study
```{r}
simulation_study <- function(design, model, num_repetitions, models) {
  results_list <- list()
  
  for (model_type in models) {
    for (i in 1:nrow(design)) {
      row <- design[i, ]
      biases_list <- vector("list", length = num_repetitions)

      for (rep in 1:num_repetitions) {
        estimates_list <- planned_analysis(row$N_sizes, row$psi_values, row$phis, model, model_type)
        
        # Directly use row$phis as the single true value for bias calculation
        biases <- sapply(estimates_list, function(estimated_values) {
          if (!is.null(estimated_values)) {
            # Compare estimated values to the single true phi value
            abs_est_diff <- abs(estimated_values - row$phis)
            return(abs_est_diff)  # Return all biases
          } else {
            return(NA)  # Handle missing estimates
          }
        }, simplify = FALSE)
        biases_list[[rep]] <- biases
      }
      
      # Aggregate and average biases across all repetitions
      all_biases <- unlist(biases_list)
      avg_abs_bias <- mean(all_biases, na.rm = TRUE)
      
      # Store the results for this condition
      results_list[[length(results_list) + 1]] <- list(
        ModelType = model_type,
        N = row$N_sizes,
        PsiValues = row$psi_values,
        PhiCondition = row$phis,  # Storing as PhiCondition for clarity
        AvgAbsBias = avg_abs_bias
      )
    }
  }
  
  # Combine results into a single data frame
  results_df <- do.call(rbind, lapply(results_list, data.frame, stringsAsFactors = FALSE))
  return(results_df)
}





```

## RUN
```{r}
design <- setup_design()
models <- c("SEM_ULS", "LSAM_ULS")  # Models to test
num_repetitions <- 2

# Execute the simulation study
results_df <- simulation_study(design, model, num_repetitions, models)

# View the results
print(results_df)


```
Weirdly, the values differ with respect to N, but only very slightly. There does not seem to be a problem with the dataset generation.

Model fit indices look very good. GPT suggestion: Consider adding more variability in the data generating mechanism, perhaps by reducing factor loadings or introducing more measurement error. --> Wont do that but potential cause?

# Report analysis
```{r}
report_analysis <- function(results_df, models) {
  # Create a list to store the tables
  tables_list <- list()
  
  # Get unique cl conditions from the results dataframe
  PsiValues <- unique(results_df$PsiValues)
  
  # Loop through each model type to create tables
  for (model_type in models) {
    for (psi_value in PsiValues) {
      # Filter and pivot data for the current model and psi_value condition
      pivot_table <- results_df %>%
        filter(ModelType == model_type, PsiValues == psi_value) %>%
        select(-ModelType, -PsiValues) %>%
        spread(key = N, value = AvgAbsBias)
      
      # Set table name based on model type and psi_value condition
      table_name <- paste(model_type, "PsiValues", psi_value, sep = "_")
      tables_list[[table_name]] <- pivot_table
    }
  }
  
  return(tables_list)
}

# Assuming results_df and models are already defined
list_of_tables <- report_analysis(results_df, models)


# Access a specific table
SEM_Psis_0.2 <- list_of_tables[["SEM_ULS_PsiValues_0.2"]] 

#display all tables
report_analysis(results_df, models)
```

# Substract tables?
```{r}
library(purrr)

lsam_table <- list_of_tables[["LSAM_ULS_PsiValues_0.4"]]
sem_table <- list_of_tables[["SEM_ULS_PsiValues_0.4"]]

# Use map2_df from purrr to subtract the SEM table from the LSAM table
diff_table <- map2_df(lsam_table[-1], sem_table[-1], `-`)

# Add the PhiCondition column back
diff_table <- bind_cols(lsam_table[1], diff_table)

print(diff_table)
```
Negative values = LSAM better ; Positive values = SEM better

